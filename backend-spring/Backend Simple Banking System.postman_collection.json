{
	"info": {
		"_postman_id": "b014a992-e434-45c4-ade1-3549cd4877fd",
		"name": "Backend Simple Banking System",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7576639"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "login",
					"item": [
						{
							"name": "admins",
							"item": [
								{
									"name": "login admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessUsername\": \"sysadmin\",\r\n    \"accessPassword\": \"dPCd^r8Bry*qiqPkN5bo\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "clients",
							"item": [
								{
									"name": "login client andre-munhoz",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessUsername\": \"andremunhoz\",\r\n    \"accessPassword\": \"v37Ws%G!MhV\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"login"
											]
										}
									},
									"response": [
										{
											"name": "login client andre-munhoz",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"accessUsername\": \"andremunhoz\",\r\n    \"accessPassword\": \"v37Ws%G!MhV\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/users/auth/login",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"users",
														"auth",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 02 Jul 2025 01:35:02 GMT"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=60"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhbmRyZW11bmhveiIsInJvbGUiOiJDTElFTlQiLCJpYXQiOjE3NTE0MjAxMDIsImV4cCI6MTc1MTQyMzcwMn0.B6QmtleyGvFX-QoITgsGF46l-wwFBgM9JBFaJko3Ics\"\n}"
										}
									]
								},
								{
									"name": "login client petrucio-amorim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessUsername\": \"petrucioamorim\",\r\n    \"accessPassword\": \"$MgNC53W\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login client juliano-mesquita",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessUsername\": \"julianomesquita\",\r\n    \"accessPassword\": \"a1N$MgC56P\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "merchants",
							"item": [
								{
									"name": "login merchant eletro-topps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessUsername\": \"eletrotopps\",\r\n    \"accessPassword\": \"cSO93#E#XgE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login merchant roupas-toritama",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessUsername\": \"roupastoritama\",\r\n    \"accessPassword\": \"Gt%8Pw#HW6j\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login merchant jewelry-beauty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessUsername\": \"jewelrybeauty\",\r\n    \"accessPassword\": \"1xWKoPn4^7&\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"login"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "register",
					"item": [
						{
							"name": "clients",
							"item": [
								{
									"name": "register client andre-munhoz",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\":\"Andre\",\r\n    \"lastName\":\"Munhoz\",\r\n    \"email\":\"munhozandre30@gmail.com\",\r\n    \"accessUsername\": \"andremunhoz\",\r\n    \"accessPassword\": \"v37Ws%G!MhV\",\r\n    \"transactionPassword\": \"548269\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/registerClient",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"registerClient"
											]
										}
									},
									"response": [
										{
											"name": "register client andre-munhoz",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\":\"Andre\",\r\n    \"lastName\":\"Munhoz\",\r\n    \"email\":\"munhozandre30@gmail.com\",\r\n    \"accessUsername\": \"andremunhoz\",\r\n    \"accessPassword\": \"v37Ws%G!MhV\",\r\n    \"transactionPassword\": \"548269\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/users/auth/registerClient",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"users",
														"auth",
														"registerClient"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 02 Jul 2025 14:54:53 GMT"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=60"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"account\": {\n        \"ownerFirstName\": \"Andre\",\n        \"ownerLastName\": \"Munhoz\",\n        \"ownerEmail\": \"munhozandre30@gmail.com\",\n        \"balance\": 0,\n        \"status\": \"ACTIVE\",\n        \"accountNumber\": \"1184473176\",\n        \"createdAt\": \"2025-07-02T11:54:51.1980989-03:00\",\n        \"updatedAt\": \"2025-07-02T11:54:51.1980989-03:00\"\n    }\n}"
										}
									]
								},
								{
									"name": "register client petrucio-amorim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\":\"PetrÃºcio\",\r\n    \"lastName\":\"Amorim\",\r\n    \"email\":\"amorimpetrucio3@gmail.com\",\r\n    \"accessUsername\": \"petrucioamorim\",\r\n    \"accessPassword\": \"$MgNC53W\",\r\n    \"transactionPassword\": \"986336\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/registerClient",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"registerClient"
											]
										}
									},
									"response": [
										{
											"name": "register client petrucio-amorim",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\":\"PetrÃºcio\",\r\n    \"lastName\":\"Amorim\",\r\n    \"email\":\"amorimpetrucio3@gmail.com\",\r\n    \"accessUsername\": \"petrucioamorim\",\r\n    \"accessPassword\": \"$MgNC53W\",\r\n    \"transactionPassword\": \"986336\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/users/auth/registerClient",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"users",
														"auth",
														"registerClient"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 02 Jul 2025 14:56:53 GMT"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=60"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"account\": {\n        \"ownerFirstName\": \"PetrÃºcio\",\n        \"ownerLastName\": \"Amorim\",\n        \"ownerEmail\": \"amorimpetrucio3@gmail.com\",\n        \"balance\": 0,\n        \"status\": \"ACTIVE\",\n        \"accountNumber\": \"3157128317\",\n        \"createdAt\": \"2025-07-02T11:56:51.2876518-03:00\",\n        \"updatedAt\": \"2025-07-02T11:56:51.2876518-03:00\"\n    }\n}"
										}
									]
								},
								{
									"name": "register client juliano-mesquita",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\":\"Juliano\",\r\n    \"lastName\":\"Mesquita\",\r\n    \"email\":\"juliano.mesquita1991@gmail.com\",\r\n    \"accessUsername\": \"julianomesquita\",\r\n    \"accessPassword\": \"a1N$MgC56P\",\r\n    \"transactionPassword\": \"102589\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/registerClient",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"registerClient"
											]
										}
									},
									"response": [
										{
											"name": "register client juliano-mesquita",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"firstName\":\"Juliano\",\r\n    \"lastName\":\"Mesquita\",\r\n    \"email\":\"juliano.mesquita1991@gmail.com\",\r\n    \"accessUsername\": \"julianomesquita\",\r\n    \"accessPassword\": \"a1N$MgC56P\",\r\n    \"transactionPassword\": \"102589\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/users/auth/registerClient",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"users",
														"auth",
														"registerClient"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 02 Jul 2025 14:57:04 GMT"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=60"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"account\": {\n        \"ownerFirstName\": \"Juliano\",\n        \"ownerLastName\": \"Mesquita\",\n        \"ownerEmail\": \"juliano.mesquita1991@gmail.com\",\n        \"balance\": 0,\n        \"status\": \"ACTIVE\",\n        \"accountNumber\": \"6899564294\",\n        \"createdAt\": \"2025-07-02T11:57:02.5086272-03:00\",\n        \"updatedAt\": \"2025-07-02T11:57:02.5086272-03:00\"\n    }\n}"
										}
									]
								}
							]
						},
						{
							"name": "merchants",
							"item": [
								{
									"name": "register merchant eletro-topps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\":\"Eletro\",\r\n    \"lastName\":\"Topps\",\r\n    \"email\":\"eletro.topps@fabioafreitas.site\",\r\n    \"accessUsername\": \"eletrotopps\",\r\n    \"accessPassword\": \"cSO93#E#XgE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/registerMerchant",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"registerMerchant"
											]
										}
									},
									"response": []
								},
								{
									"name": "register merchant roupas-toritama",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\":\"Roupas\",\r\n    \"lastName\":\"Toritama\",\r\n    \"email\":\"roupas.toritama@fabioafreitas.site\",\r\n    \"accessUsername\": \"roupastoritama\",\r\n    \"accessPassword\": \"Gt%8Pw#HW6j\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/registerMerchant",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"registerMerchant"
											]
										}
									},
									"response": []
								},
								{
									"name": "register merchant jewelry-beauty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\":\"Jewelry\",\r\n    \"lastName\":\"Beauty\",\r\n    \"email\":\"jewelry.beauty@fabioafreitas.site\",\r\n    \"accessUsername\": \"jewelrybeauty\",\r\n    \"accessPassword\": \"1xWKoPn4^7&\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/registerMerchant",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"registerMerchant"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "recover",
					"item": [
						{
							"name": "username",
							"item": [
								{
									"name": "remind my username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\":\"fbio.alves095@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/remindUsername",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"remindUsername"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "recover access password",
							"item": [
								{
									"name": "request access password reset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\":\"fbio.alves095@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/requestAccessPasswordReset",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"requestAccessPasswordReset"
											]
										}
									},
									"response": []
								},
								{
									"name": "reset  access password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"newAccessPassword\":\"11111aA#\",\r\n    \"resetRequestToken\":\"af6ff15b-9cb4-42be-b177-1868ecb9d940\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/resetAccessPassword",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"resetAccessPassword"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "recover transaction password",
							"item": [
								{
									"name": "request transaction password reset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\":\"fbio.alves095@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/requestTransactionPasswordReset",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"requestTransactionPasswordReset"
											]
										}
									},
									"response": []
								},
								{
									"name": "reset  transaction password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessPassword\":\"$MgNC53W\",\r\n    \"newTransactionPassword\":\"123456\",\r\n    \"resetRequestToken\":\"a0be15f0-51f4-44c7-98d1-8e67e6327439\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/resetTransactionPassword",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"resetTransactionPassword"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "profile",
					"item": [
						{
							"name": "get my user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check if the response status code is 200\r",
											"if (pm.response.code === 200) {\r",
											"    try {\r",
											"        // Parse the JSON response body\r",
											"        let responseBody = pm.response.json();\r",
											"        \r",
											"        // Check if the \"token\" key exists in the response\r",
											"        if (responseBody.token) {\r",
											"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
											"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
											"            console.log(\"JWT set to:\", responseBody.token);\r",
											"        } else {\r",
											"            console.log(\"Access token not found in the response.\");\r",
											"        }\r",
											"    } catch (e) {\r",
											"        console.error(\"Error parsing JSON response:\", e);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Response code is not 200:\", pm.response.code);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/users/profile/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"profile",
										"me"
									]
								}
							},
							"response": [
								{
									"name": "get my user profile",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/users/profile/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"profile",
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 15:02:02 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"firstName\": \"Andre\",\n    \"lastName\": \"Munhoz\",\n    \"email\": \"munhozandre30@gmail.com\",\n    \"phone\": \"+55 (81) 91234-1234\",\n    \"addressLine1\": \"Rua dos testes, 123, Ap-3\",\n    \"addressLine2\": \"PrÃ©dio\",\n    \"city\": \"SÃ£o bernardo dos campos\",\n    \"province\": \"SÃ£o Paulo\",\n    \"postalCode\": \"04063-002\",\n    \"country\": \"Brasil\",\n    \"profilePictureUrl\": \"https://umbraco.com/media/y21lwhsb/niels.webp?rmode=pad&width=680&v=1dad76ab846bdc0\"\n}"
								}
							]
						},
						{
							"name": "update my user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check if the response status code is 200\r",
											"if (pm.response.code === 200) {\r",
											"    try {\r",
											"        // Parse the JSON response body\r",
											"        let responseBody = pm.response.json();\r",
											"        \r",
											"        // Check if the \"token\" key exists in the response\r",
											"        if (responseBody.token) {\r",
											"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
											"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
											"            console.log(\"JWT set to:\", responseBody.token);\r",
											"        } else {\r",
											"            console.log(\"Access token not found in the response.\");\r",
											"        }\r",
											"    } catch (e) {\r",
											"        console.error(\"Error parsing JSON response:\", e);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Response code is not 200:\", pm.response.code);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phone\":\"+55 (81) 91234-1234\",\r\n    \"addressLine1\":\"Rua dos testes, 123, Ap-3\",\r\n    \"addressLine2\":\"PrÃ©dio\",\r\n    \"city\":\"SÃ£o bernardo dos campos\",\r\n    \"province\":\"SÃ£o Paulo\",\r\n    \"postalCode\":\"04063-002\",\r\n    \"country\":\"Brasil\",\r\n    \"profilePictureUrl\":\"https://umbraco.com/media/y21lwhsb/niels.webp?rmode=pad&width=680&v=1dad76ab846bdc0\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/users/profile/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"profile",
										"me"
									]
								}
							},
							"response": [
								{
									"name": "update my user profile",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"phone\":\"+55 (81) 91234-1234\",\r\n    \"addressLine1\":\"Rua dos testes, 123, Ap-3\",\r\n    \"addressLine2\":\"PrÃ©dio\",\r\n    \"city\":\"SÃ£o bernardo dos campos\",\r\n    \"province\":\"SÃ£o Paulo\",\r\n    \"postalCode\":\"04063-002\",\r\n    \"country\":\"Brasil\",\r\n    \"profilePictureUrl\":\"https://umbraco.com/media/y21lwhsb/niels.webp?rmode=pad&width=680&v=1dad76ab846bdc0\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/profile/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"profile",
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 15:01:37 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"firstName\": \"Andre\",\n    \"lastName\": \"Munhoz\",\n    \"email\": \"munhozandre30@gmail.com\",\n    \"phone\": \"+55 (81) 91234-1234\",\n    \"addressLine1\": \"Rua dos testes, 123, Ap-3\",\n    \"addressLine2\": \"PrÃ©dio\",\n    \"city\": \"SÃ£o bernardo dos campos\",\n    \"province\": \"SÃ£o Paulo\",\n    \"postalCode\": \"04063-002\",\n    \"country\": \"Brasil\",\n    \"profilePictureUrl\": \"https://umbraco.com/media/y21lwhsb/niels.webp?rmode=pad&width=680&v=1dad76ab846bdc0\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "accounts",
			"item": [
				{
					"name": "user",
					"item": [
						{
							"name": "get my account info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/accounts/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"me"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "get my account info",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/accounts/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"accounts",
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 15:02:27 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"ownerFirstName\": \"Andre\",\n    \"ownerLastName\": \"Munhoz\",\n    \"ownerEmail\": \"munhozandre30@gmail.com\",\n    \"balance\": 0,\n    \"status\": \"ACTIVE\",\n    \"accountNumber\": \"1184473176\",\n    \"createdAt\": \"2025-07-02T14:54:51.198099Z\",\n    \"updatedAt\": \"2025-07-02T14:54:51.198099Z\"\n}"
								}
							]
						},
						{
							"name": "get avaliable budget categories",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/accounts/budgetCategories",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"budgetCategories"
									]
								}
							},
							"response": [
								{
									"name": "get avaliable budget categories",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/accounts/budgetCategories",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"accounts",
												"budgetCategories"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 01:37:39 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n        \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n    },\n    {\n        \"budgetCategoryName\": \"SaÃºde\",\n        \"budgetCategoryId\": \"7fb1389e-056c-4f24-8457-5be28c9b48fc\"\n    },\n    {\n        \"budgetCategoryName\": \"EducaÃ§Ã£o\",\n        \"budgetCategoryId\": \"c810edcc-478d-44dc-a1bc-91fa2155672b\"\n    },\n    {\n        \"budgetCategoryName\": \"Transporte\",\n        \"budgetCategoryId\": \"949d30e1-40e6-444c-83e6-e6cee3583ee1\"\n    },\n    {\n        \"budgetCategoryName\": \"Moradia\",\n        \"budgetCategoryId\": \"4e10f8df-dd8d-456b-9344-0053060793bf\"\n    },\n    {\n        \"budgetCategoryName\": \"Lazer\",\n        \"budgetCategoryId\": \"9fb606b0-0894-4c5d-8b1b-da0a5053ab0c\"\n    },\n    {\n        \"budgetCategoryName\": \"VestuÃ¡rio\",\n        \"budgetCategoryId\": \"e5e9d5bb-0866-483c-827a-7933d29a1a8a\"\n    },\n    {\n        \"budgetCategoryName\": \"ServiÃ§os\",\n        \"budgetCategoryId\": \"7329cc8c-13fa-4ace-afe4-2317df093554\"\n    },\n    {\n        \"budgetCategoryName\": \"ComunicaÃ§Ã£o\",\n        \"budgetCategoryId\": \"975acb63-b302-4158-a7ae-9961ff076fcd\"\n    },\n    {\n        \"budgetCategoryName\": \"Investimentos\",\n        \"budgetCategoryId\": \"d6f67ffc-028e-4bee-8660-6aa3dba47e3c\"\n    },\n    {\n        \"budgetCategoryName\": \"DÃ­vidas\",\n        \"budgetCategoryId\": \"8b34896c-b3ef-47ea-8009-271c203bccd8\"\n    },\n    {\n        \"budgetCategoryName\": \"Impostos\",\n        \"budgetCategoryId\": \"b49b9281-bac5-4f38-ba3b-313f543183b7\"\n    },\n    {\n        \"budgetCategoryName\": \"DoaÃ§Ãµes\",\n        \"budgetCategoryId\": \"b8759dca-c5b4-47a1-b789-0fb976d26ef5\"\n    },\n    {\n        \"budgetCategoryName\": \"Outros\",\n        \"budgetCategoryId\": \"507c58ec-8563-44a9-b9a3-7bf439f5db8c\"\n    }\n]"
								}
							]
						},
						{
							"name": "get my account budget allocations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/accounts/me/budget",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"me",
										"budget"
									]
								}
							},
							"response": [
								{
									"name": "get my account budget allocations",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/accounts/me/budget",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"accounts",
												"me",
												"budget"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 01:37:46 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n        \"budgetCategoryId\": \"e30246f3-6e7c-429b-b3ea-4ef1695bf406\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"SaÃºde\",\n        \"budgetCategoryId\": \"8037b9d2-29f6-42db-b2d2-d74e55e30fba\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"EducaÃ§Ã£o\",\n        \"budgetCategoryId\": \"34604507-7728-454e-820e-35bafae8e61a\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Transporte\",\n        \"budgetCategoryId\": \"852fa1de-c9ae-426d-82a4-2856b28bf18f\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Moradia\",\n        \"budgetCategoryId\": \"165a5d4d-065d-4433-ace2-9c6603bc00fa\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Lazer\",\n        \"budgetCategoryId\": \"54fa0fc5-9557-48c5-b016-f7130b7e33e3\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"VestuÃ¡rio\",\n        \"budgetCategoryId\": \"ca226975-076c-4aab-9603-c600a9932c19\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"ServiÃ§os\",\n        \"budgetCategoryId\": \"670a3b0e-d854-4b40-9e05-ddb15b163e32\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"ComunicaÃ§Ã£o\",\n        \"budgetCategoryId\": \"5bd91c82-66b7-40e9-bde9-da0344ad653a\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Investimentos\",\n        \"budgetCategoryId\": \"fbe816ba-ac1d-4f86-9f75-0ade6c396aa9\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"DÃ­vidas\",\n        \"budgetCategoryId\": \"37a4a76e-2f9e-4336-9fbb-0c8b63da7bb8\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Impostos\",\n        \"budgetCategoryId\": \"fa154770-38a9-4e55-9200-9c2e959f6b7f\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"DoaÃ§Ãµes\",\n        \"budgetCategoryId\": \"39f25a5c-7fdc-45ad-a1dc-bc24d00a9c5d\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Outros\",\n        \"budgetCategoryId\": \"72ceb3ea-9b94-48e4-96f6-1dee79f14acd\",\n        \"allocationValue\": 0\n    }\n]"
								}
							]
						},
						{
							"name": "update my account budget allocations",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"allocations\": [\r\n        {\r\n            \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\r\n            \"budgetCategoryId\": \"c8ca0e9e-d96a-4892-8950-538eb3770c20\",\r\n            \"allocationValue\": 100\r\n        },\r\n        {\r\n            \"budgetCategoryName\": \"SaÃºde\",\r\n            \"budgetCategoryId\": \"2f244527-dae9-45d6-86b3-08d1fdc10c8f\",\r\n            \"allocationValue\": 200\r\n        },\r\n        {\r\n            \"budgetCategoryName\": \"EducaÃ§Ã£o\",\r\n            \"budgetCategoryId\": \"39bd8db9-9ac4-44aa-8661-fc5de6e5112b\",\r\n            \"allocationValue\": 150\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/accounts/me/budget",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"me",
										"budget"
									]
								}
							},
							"response": [
								{
									"name": "update my account budget allocations",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"allocations\": [\r\n        {\r\n            \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\r\n            \"budgetCategoryId\": \"c8ca0e9e-d96a-4892-8950-538eb3770c20\",\r\n            \"allocationValue\": 100\r\n        },\r\n        {\r\n            \"budgetCategoryName\": \"SaÃºde\",\r\n            \"budgetCategoryId\": \"2f244527-dae9-45d6-86b3-08d1fdc10c8f\",\r\n            \"allocationValue\": 200\r\n        },\r\n        {\r\n            \"budgetCategoryName\": \"EducaÃ§Ã£o\",\r\n            \"budgetCategoryId\": \"39bd8db9-9ac4-44aa-8661-fc5de6e5112b\",\r\n            \"allocationValue\": 150\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/accounts/me/budget",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"accounts",
												"me",
												"budget"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 15:13:43 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n        \"budgetCategoryId\": \"c8ca0e9e-d96a-4892-8950-538eb3770c20\",\n        \"allocationValue\": 100\n    },\n    {\n        \"budgetCategoryName\": \"SaÃºde\",\n        \"budgetCategoryId\": \"2f244527-dae9-45d6-86b3-08d1fdc10c8f\",\n        \"allocationValue\": 200\n    },\n    {\n        \"budgetCategoryName\": \"EducaÃ§Ã£o\",\n        \"budgetCategoryId\": \"39bd8db9-9ac4-44aa-8661-fc5de6e5112b\",\n        \"allocationValue\": 150\n    },\n    {\n        \"budgetCategoryName\": \"Transporte\",\n        \"budgetCategoryId\": \"38fd3fae-3fff-4bda-88ed-de20a87ab1ea\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Moradia\",\n        \"budgetCategoryId\": \"69708bb4-f60a-4bce-856d-808ddc0aa133\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Lazer\",\n        \"budgetCategoryId\": \"afc75a21-e711-480b-b7e1-14eeb2a1cc93\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"VestuÃ¡rio\",\n        \"budgetCategoryId\": \"7548f8c3-a424-46b1-a248-a6623d950458\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"ServiÃ§os\",\n        \"budgetCategoryId\": \"148e1814-143b-4e95-8faf-fb30f16dd28d\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"ComunicaÃ§Ã£o\",\n        \"budgetCategoryId\": \"c8f5918a-fcf5-4d2f-b81d-8a832b9c5af2\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Investimentos\",\n        \"budgetCategoryId\": \"0d8c37e4-100d-4861-9374-656de5a35934\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"DÃ­vidas\",\n        \"budgetCategoryId\": \"c5e5fc06-112e-4d70-a211-1d38aed53112\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Impostos\",\n        \"budgetCategoryId\": \"e6dfc21a-4f44-4742-812e-4020bfd2c4ea\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"DoaÃ§Ãµes\",\n        \"budgetCategoryId\": \"2306f473-b30b-4aaf-b436-ef9d544e11c7\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Outros\",\n        \"budgetCategoryId\": \"7259b356-6ea6-4c8f-891f-7da5e533a10c\",\n        \"allocationValue\": 0\n    }\n]"
								}
							]
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "get all accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/accounts?page=0&size=10&sort=balance,asc",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "sort",
											"value": "balance,asc"
										},
										{
											"key": "createdAtStartDate",
											"value": "2025-01-01T00:00:00Z",
											"disabled": true
										},
										{
											"key": "createdAtEndDate",
											"value": "2025-12-31T00:00:00Z",
											"disabled": true
										},
										{
											"key": "updatedAtStartDate",
											"value": "2025-01-01T00:00:00Z",
											"disabled": true
										},
										{
											"key": "updatedAtEndDate",
											"value": "2025-12-31T00:00:00Z",
											"disabled": true
										},
										{
											"key": "accountStatus",
											"value": "ACTIVE",
											"disabled": true
										},
										{
											"key": "minValue",
											"value": "50",
											"disabled": true
										},
										{
											"key": "maxValue",
											"value": "100",
											"disabled": true
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "get all accounts",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/accounts?page=0&size=10&sort=balance,asc",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "balance,asc"
												},
												{
													"key": "createdAtStartDate",
													"value": "2025-01-01T00:00:00Z",
													"disabled": true
												},
												{
													"key": "createdAtEndDate",
													"value": "2025-12-31T00:00:00Z",
													"disabled": true
												},
												{
													"key": "updatedAtStartDate",
													"value": "2025-01-01T00:00:00Z",
													"disabled": true
												},
												{
													"key": "updatedAtEndDate",
													"value": "2025-12-31T00:00:00Z",
													"disabled": true
												},
												{
													"key": "accountStatus",
													"value": "ACTIVE",
													"disabled": true
												},
												{
													"key": "minValue",
													"value": "50",
													"disabled": true
												},
												{
													"key": "maxValue",
													"value": "100",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 15:11:01 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"content\": [\n        {\n            \"ownerFirstName\": \"Juliano\",\n            \"ownerLastName\": \"Mesquita\",\n            \"ownerEmail\": \"juliano.mesquita1991@gmail.com\",\n            \"balance\": 50,\n            \"status\": \"ACTIVE\",\n            \"accountNumber\": \"6899564294\",\n            \"createdAt\": \"2025-07-02T14:57:02.508627Z\",\n            \"updatedAt\": \"2025-07-02T14:57:02.508627Z\"\n        },\n        {\n            \"ownerFirstName\": \"PetrÃºcio\",\n            \"ownerLastName\": \"Amorim\",\n            \"ownerEmail\": \"amorimpetrucio3@gmail.com\",\n            \"balance\": 100,\n            \"status\": \"ACTIVE\",\n            \"accountNumber\": \"3157128317\",\n            \"createdAt\": \"2025-07-02T14:56:51.287652Z\",\n            \"updatedAt\": \"2025-07-02T14:56:51.287652Z\"\n        },\n        {\n            \"ownerFirstName\": \"Andre\",\n            \"ownerLastName\": \"Munhoz\",\n            \"ownerEmail\": \"munhozandre30@gmail.com\",\n            \"balance\": 200,\n            \"status\": \"ACTIVE\",\n            \"accountNumber\": \"1184473176\",\n            \"createdAt\": \"2025-07-02T14:54:51.198099Z\",\n            \"updatedAt\": \"2025-07-02T14:54:51.198099Z\"\n        }\n    ],\n    \"pageable\": {\n        \"pageNumber\": 0,\n        \"pageSize\": 10,\n        \"sort\": {\n            \"empty\": false,\n            \"sorted\": true,\n            \"unsorted\": false\n        },\n        \"offset\": 0,\n        \"paged\": true,\n        \"unpaged\": false\n    },\n    \"last\": true,\n    \"totalPages\": 1,\n    \"totalElements\": 3,\n    \"size\": 10,\n    \"number\": 0,\n    \"sort\": {\n        \"empty\": false,\n        \"sorted\": true,\n        \"unsorted\": false\n    },\n    \"first\": true,\n    \"numberOfElements\": 3,\n    \"empty\": false\n}"
								}
							]
						},
						{
							"name": "get account by account number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/accounts/1184473176",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"1184473176"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "get account by account number",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/accounts/1184473176",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"accounts",
												"1184473176"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 15:12:19 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"ownerFirstName\": \"Andre\",\n    \"ownerLastName\": \"Munhoz\",\n    \"ownerEmail\": \"munhozandre30@gmail.com\",\n    \"balance\": 200,\n    \"status\": \"ACTIVE\",\n    \"accountNumber\": \"1184473176\",\n    \"createdAt\": \"2025-07-02T14:54:51.198099Z\",\n    \"updatedAt\": \"2025-07-02T14:54:51.198099Z\"\n}"
								}
							]
						},
						{
							"name": "suspend account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/accounts/suspend/6299284879",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"suspend",
										"6299284879"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "activate account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/accounts/activate/6299284879",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"activate",
										"6299284879"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "delete account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/accounts/deactivate/6607146849",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"deactivate",
										"6607146849"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "get account budget allocations by accountNumber",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/accounts/1184473176/budget",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"1184473176",
										"budget"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "transactions",
			"item": [
				{
					"name": "admins",
					"item": [
						{
							"name": "get all transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/transactions?page=0&size=10&sort=amount,asc&accountNumbers=6899564294,3157128317,1184473176&startDate=2025-01-01T00:00:00Z&endDate=2025-12-31T00:00:00Z&operationType=DEBIT&transactionStatus=APPROVED&minValue=0&maxValue=100",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "sort",
											"value": "amount,asc"
										},
										{
											"key": "accountNumbers",
											"value": "6899564294,3157128317,1184473176"
										},
										{
											"key": "startDate",
											"value": "2025-01-01T00:00:00Z"
										},
										{
											"key": "endDate",
											"value": "2025-12-31T00:00:00Z"
										},
										{
											"key": "operationType",
											"value": "DEBIT"
										},
										{
											"key": "transactionStatus",
											"value": "APPROVED"
										},
										{
											"key": "minValue",
											"value": "0"
										},
										{
											"key": "maxValue",
											"value": "100"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "get all transactions",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/transactions?page=0&size=10&sort=amount,asc&accountNumbers=6899564294,3157128317,1184473176&startDate=2025-01-01T00:00:00Z&endDate=2025-12-31T00:00:00Z&operationType=DEBIT&transactionStatus=APPROVED&minValue=0&maxValue=100",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"transactions"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "amount,asc"
												},
												{
													"key": "accountNumbers",
													"value": "6899564294,3157128317,1184473176"
												},
												{
													"key": "startDate",
													"value": "2025-01-01T00:00:00Z"
												},
												{
													"key": "endDate",
													"value": "2025-12-31T00:00:00Z"
												},
												{
													"key": "operationType",
													"value": "DEBIT"
												},
												{
													"key": "transactionStatus",
													"value": "APPROVED"
												},
												{
													"key": "minValue",
													"value": "0"
												},
												{
													"key": "maxValue",
													"value": "100"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 15:34:31 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"content\": [\n        {\n            \"transactionNumber\": \"4071e2c3-212b-4bd1-9328-7dcab44047b6\",\n            \"createdAt\": \"2025-07-02T15:16:18.335646Z\",\n            \"operationType\": \"DEBIT\",\n            \"status\": \"APPROVED\",\n            \"description\": \"test withdraw\",\n            \"amount\": 1.35,\n            \"budgetCategory\": {\n                \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n                \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n            }\n        },\n        {\n            \"transactionNumber\": \"bf3c990c-0f4c-4dba-bfa0-6b8276b84485\",\n            \"createdAt\": \"2025-07-02T15:19:18.399034Z\",\n            \"operationType\": \"DEBIT\",\n            \"status\": \"APPROVED\",\n            \"description\": \"test withdraw\",\n            \"amount\": 1.35,\n            \"budgetCategory\": {\n                \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n                \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n            }\n        }\n    ],\n    \"pageable\": {\n        \"pageNumber\": 0,\n        \"pageSize\": 10,\n        \"sort\": {\n            \"empty\": false,\n            \"sorted\": true,\n            \"unsorted\": false\n        },\n        \"offset\": 0,\n        \"paged\": true,\n        \"unpaged\": false\n    },\n    \"last\": true,\n    \"totalPages\": 1,\n    \"totalElements\": 2,\n    \"size\": 10,\n    \"number\": 0,\n    \"sort\": {\n        \"empty\": false,\n        \"sorted\": true,\n        \"unsorted\": false\n    },\n    \"first\": true,\n    \"numberOfElements\": 2,\n    \"empty\": false\n}"
								}
							]
						},
						{
							"name": "approve depositRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transactionNumber\": \"e1d483f7-be93-4601-89ac-6fc81a3a96ce\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/transactions/approve",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"approve"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "depositRequest",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"amount\":1.17,\r\n    \"description\":\"test depositRequest\",\r\n    \"transactionPassword\": \"548269\",\r\n    \"budgetCategoryId\":\"54b9e0b0-63b8-444d-9bda-81a350130473\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/transactions/operations/depositRequest",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"transactions",
												"operations",
												"depositRequest"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 15:19:25 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"transactionNumber\": \"45447fe4-4876-47f7-bc54-7ff9352fd37e\",\n    \"createdAt\": \"2025-07-02T12:19:25.5167192-03:00\",\n    \"operationType\": \"CREDIT\",\n    \"status\": \"PENDING\",\n    \"description\": \"test depositRequest\",\n    \"amount\": 1.17,\n    \"budgetCategory\": {\n        \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n        \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n    }\n}"
								}
							]
						},
						{
							"name": "reject depositRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transactionNumber\": \"c983d964-4d32-400e-b56b-a8d1832d392a\",\r\n    \"rejectionMessage\":\"possÃ­vel fraude\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/transactions/reject",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"reject"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "depositRequest",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"amount\":1.17,\r\n    \"description\":\"test depositRequest\",\r\n    \"transactionPassword\": \"548269\",\r\n    \"budgetCategoryId\":\"54b9e0b0-63b8-444d-9bda-81a350130473\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/transactions/operations/depositRequest",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"transactions",
												"operations",
												"depositRequest"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 15:19:25 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"transactionNumber\": \"45447fe4-4876-47f7-bc54-7ff9352fd37e\",\n    \"createdAt\": \"2025-07-02T12:19:25.5167192-03:00\",\n    \"operationType\": \"CREDIT\",\n    \"status\": \"PENDING\",\n    \"description\": \"test depositRequest\",\n    \"amount\": 1.17,\n    \"budgetCategory\": {\n        \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n        \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n    }\n}"
								}
							]
						}
					]
				},
				{
					"name": "clients",
					"item": [
						{
							"name": "depositRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"amount\":1.17,\r\n    \"description\":\"test depositRequest\",\r\n    \"transactionPassword\": \"548269\",\r\n    \"budgetCategoryId\":\"54b9e0b0-63b8-444d-9bda-81a350130473\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/transactions/operations/depositRequest",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"operations",
										"depositRequest"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "depositRequest",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"amount\":1.17,\r\n    \"description\":\"test depositRequest\",\r\n    \"transactionPassword\": \"548269\",\r\n    \"budgetCategoryId\":\"54b9e0b0-63b8-444d-9bda-81a350130473\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/transactions/operations/depositRequest",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"transactions",
												"operations",
												"depositRequest"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 15:19:25 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"transactionNumber\": \"45447fe4-4876-47f7-bc54-7ff9352fd37e\",\n    \"createdAt\": \"2025-07-02T12:19:25.5167192-03:00\",\n    \"operationType\": \"CREDIT\",\n    \"status\": \"PENDING\",\n    \"description\": \"test depositRequest\",\n    \"amount\": 1.17,\n    \"budgetCategory\": {\n        \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n        \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n    }\n}"
								}
							]
						},
						{
							"name": "withdraw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"amount\":1.35,\r\n    \"description\":\"test withdraw\",\r\n    \"transactionPassword\": \"548269\",\r\n    \"budgetCategoryId\":\"54b9e0b0-63b8-444d-9bda-81a350130473\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/transactions/operations/withdraw",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"operations",
										"withdraw"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "withdraw",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"amount\":1.35,\r\n    \"description\":\"test withdraw\",\r\n    \"transactionPassword\": \"548269\",\r\n    \"budgetCategoryId\":\"54b9e0b0-63b8-444d-9bda-81a350130473\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/transactions/operations/withdraw",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"transactions",
												"operations",
												"withdraw"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 15:19:18 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"transactionNumber\": \"bf3c990c-0f4c-4dba-bfa0-6b8276b84485\",\n    \"createdAt\": \"2025-07-02T12:19:18.399034-03:00\",\n    \"operationType\": \"DEBIT\",\n    \"status\": \"APPROVED\",\n    \"description\": \"test withdraw\",\n    \"amount\": 1.35,\n    \"budgetCategory\": {\n        \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n        \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n    }\n}"
								}
							]
						},
						{
							"name": "transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceTransaction\": {\r\n        \"amount\":1.02,\r\n        \"description\":\"test depositRequest\",\r\n        \"transactionPassword\": \"548269\",\r\n        \"budgetCategoryId\":\"54b9e0b0-63b8-444d-9bda-81a350130473\"\r\n    },\r\n    \"transferAccountNumber\":\"3157128317\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/transactions/operations/transfer",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"operations",
										"transfer"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "transfer",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceTransaction\": {\r\n        \"amount\":1.02,\r\n        \"description\":\"test depositRequest\",\r\n        \"transactionPassword\": \"548269\",\r\n        \"budgetCategoryId\":\"54b9e0b0-63b8-444d-9bda-81a350130473\"\r\n    },\r\n    \"transferAccountNumber\":\"3157128317\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/transactions/operations/transfer",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"transactions",
												"operations",
												"transfer"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 15:18:07 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"transaction\": {\n        \"transactionNumber\": \"04102b0d-46f2-4437-b313-b4690206fd62\",\n        \"createdAt\": \"2025-07-02T12:18:05.842931-03:00\",\n        \"operationType\": \"TRANSFER_DEBIT\",\n        \"status\": \"APPROVED\",\n        \"description\": \"test depositRequest\",\n        \"amount\": 1.02,\n        \"budgetCategory\": {\n            \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n            \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n        }\n    },\n    \"receiverInfo\": {\n        \"accountNumber\": \"3157128317\",\n        \"firstName\": \"PetrÃºcio\",\n        \"lastName\": \"Amorim\"\n    }\n}"
								}
							]
						},
						{
							"name": "purchase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"amount\":1000,\r\n    \"description\":\"compra muito cara\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/transactions/purchase",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"purchase"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "get all my transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/transactions/me?page=0&size=10&sort=amount,asc&accountNumbers=6899564294,3157128317,1184473176&startDate=2025-01-01T00:00:00Z&endDate=2025-12-31T00:00:00Z&operationType=DEBIT&transactionStatus=APPROVED&minValue=0&maxValue=100",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"me"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "sort",
											"value": "amount,asc"
										},
										{
											"key": "accountNumbers",
											"value": "6899564294,3157128317,1184473176"
										},
										{
											"key": "startDate",
											"value": "2025-01-01T00:00:00Z"
										},
										{
											"key": "endDate",
											"value": "2025-12-31T00:00:00Z"
										},
										{
											"key": "operationType",
											"value": "DEBIT"
										},
										{
											"key": "transactionStatus",
											"value": "APPROVED"
										},
										{
											"key": "minValue",
											"value": "0"
										},
										{
											"key": "maxValue",
											"value": "100"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "get all my transactions Copy",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/transactions/me?page=0&size=10&sort=amount,asc&accountNumbers=6899564294,3157128317,1184473176&startDate=2025-01-01T00:00:00Z&endDate=2025-12-31T00:00:00Z&operationType=DEBIT&transactionStatus=APPROVED&minValue=0&maxValue=100",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"transactions",
												"me"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "amount,asc"
												},
												{
													"key": "accountNumbers",
													"value": "6899564294,3157128317,1184473176"
												},
												{
													"key": "startDate",
													"value": "2025-01-01T00:00:00Z"
												},
												{
													"key": "endDate",
													"value": "2025-12-31T00:00:00Z"
												},
												{
													"key": "operationType",
													"value": "DEBIT"
												},
												{
													"key": "transactionStatus",
													"value": "APPROVED"
												},
												{
													"key": "minValue",
													"value": "0"
												},
												{
													"key": "maxValue",
													"value": "100"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 15:38:53 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"content\": [\n        {\n            \"transactionNumber\": \"4071e2c3-212b-4bd1-9328-7dcab44047b6\",\n            \"createdAt\": \"2025-07-02T15:16:18.335646Z\",\n            \"operationType\": \"DEBIT\",\n            \"status\": \"APPROVED\",\n            \"description\": \"test withdraw\",\n            \"amount\": 1.35,\n            \"budgetCategory\": {\n                \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n                \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n            }\n        },\n        {\n            \"transactionNumber\": \"bf3c990c-0f4c-4dba-bfa0-6b8276b84485\",\n            \"createdAt\": \"2025-07-02T15:19:18.399034Z\",\n            \"operationType\": \"DEBIT\",\n            \"status\": \"APPROVED\",\n            \"description\": \"test withdraw\",\n            \"amount\": 1.35,\n            \"budgetCategory\": {\n                \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n                \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n            }\n        }\n    ],\n    \"pageable\": {\n        \"pageNumber\": 0,\n        \"pageSize\": 10,\n        \"sort\": {\n            \"empty\": false,\n            \"sorted\": true,\n            \"unsorted\": false\n        },\n        \"offset\": 0,\n        \"paged\": true,\n        \"unpaged\": false\n    },\n    \"last\": true,\n    \"totalPages\": 1,\n    \"totalElements\": 2,\n    \"size\": 10,\n    \"number\": 0,\n    \"sort\": {\n        \"empty\": false,\n        \"sorted\": true,\n        \"unsorted\": false\n    },\n    \"numberOfElements\": 2,\n    \"first\": true,\n    \"empty\": false\n}"
								}
							]
						},
						{
							"name": "get transaction by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/transactions/04102b0d-46f2-4437-b313-b4690206fd62",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"04102b0d-46f2-4437-b313-b4690206fd62"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "get transaction by id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/transactions/04102b0d-46f2-4437-b313-b4690206fd62",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"transactions",
												"04102b0d-46f2-4437-b313-b4690206fd62"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 15:20:07 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"transactionNumber\": \"04102b0d-46f2-4437-b313-b4690206fd62\",\n    \"createdAt\": \"2025-07-02T15:18:05.842931Z\",\n    \"operationType\": \"TRANSFER_DEBIT\",\n    \"status\": \"APPROVED\",\n    \"description\": \"test depositRequest\",\n    \"amount\": 1.02,\n    \"budgetCategory\": {\n        \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n        \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n    }\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "merchants",
			"item": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		},
		{
			"key": "jwt",
			"value": ""
		}
	]
}