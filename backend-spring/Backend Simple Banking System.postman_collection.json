{
	"info": {
		"_postman_id": "b014a992-e434-45c4-ade1-3549cd4877fd",
		"name": "Backend Simple Banking System",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7576639"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "login",
					"item": [
						{
							"name": "admins",
							"item": [
								{
									"name": "login admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessUsername\": \"sysadmin\",\r\n    \"accessPassword\": \"dPCd^r8Bry*qiqPkN5bo\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "clients",
							"item": [
								{
									"name": "login client andre-munhoz",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessUsername\": \"andremunhoz\",\r\n    \"accessPassword\": \"v37Ws%G!MhV\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"login"
											]
										}
									},
									"response": [
										{
											"name": "login client andre-munhoz",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"accessUsername\": \"andremunhoz\",\r\n    \"accessPassword\": \"v37Ws%G!MhV\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/api/users/auth/login",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"api",
														"users",
														"auth",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 02 Jul 2025 01:35:02 GMT"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=60"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhbmRyZW11bmhveiIsInJvbGUiOiJDTElFTlQiLCJpYXQiOjE3NTE0MjAxMDIsImV4cCI6MTc1MTQyMzcwMn0.B6QmtleyGvFX-QoITgsGF46l-wwFBgM9JBFaJko3Ics\"\n}"
										}
									]
								},
								{
									"name": "login client petrucio-amorim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessUsername\": \"petrucioamorim\",\r\n    \"accessPassword\": \"$MgNC53W\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login client juliano-mesquita",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessUsername\": \"julianomesquita\",\r\n    \"accessPassword\": \"a1N$MgC56P\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "merchants",
							"item": [
								{
									"name": "login merchant eletro-topps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessUsername\": \"eletrotopps\",\r\n    \"accessPassword\": \"cSO93#E#XgE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login merchant roupas-toritama",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessUsername\": \"roupastoritama\",\r\n    \"accessPassword\": \"Gt%8Pw#HW6j\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login merchant jewelry-beauty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessUsername\": \"jewelrybeauty\",\r\n    \"accessPassword\": \"1xWKoPn4^7&\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"login"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "register",
					"item": [
						{
							"name": "clients",
							"item": [
								{
									"name": "register client andre-munhoz",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\":\"Andre\",\r\n    \"lastName\":\"Munhoz\",\r\n    \"email\":\"munhozandre30@gmail.com\",\r\n    \"accessUsername\": \"andremunhoz\",\r\n    \"accessPassword\": \"v37Ws%G!MhV\",\r\n    \"transactionPassword\": \"548269\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/registerClient",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"registerClient"
											]
										}
									},
									"response": []
								},
								{
									"name": "register client petrucio-amorim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\":\"PetrÃºcio\",\r\n    \"lastName\":\"Amorim\",\r\n    \"email\":\"amorimpetrucio3@gmail.com\",\r\n    \"accessUsername\": \"petrucioamorim\",\r\n    \"accessPassword\": \"$MgNC53W\",\r\n    \"transactionPassword\": \"986336\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/registerClient",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"registerClient"
											]
										}
									},
									"response": []
								},
								{
									"name": "register client juliano-mesquita",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\":\"Juliano\",\r\n    \"lastName\":\"Mesquita\",\r\n    \"email\":\"juliano.mesquita1991@gmail.com\",\r\n    \"accessUsername\": \"julianomesquita\",\r\n    \"accessPassword\": \"a1N$MgC56P\",\r\n    \"transactionPassword\": \"102589\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/registerClient",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"registerClient"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "merchants",
							"item": [
								{
									"name": "register merchant eletro-topps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\":\"Eletro\",\r\n    \"lastName\":\"Topps\",\r\n    \"email\":\"eletro.topps@fabioafreitas.site\",\r\n    \"accessUsername\": \"eletrotopps\",\r\n    \"accessPassword\": \"cSO93#E#XgE\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/registerMerchant",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"registerMerchant"
											]
										}
									},
									"response": []
								},
								{
									"name": "register merchant roupas-toritama",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\":\"Roupas\",\r\n    \"lastName\":\"Toritama\",\r\n    \"email\":\"roupas.toritama@fabioafreitas.site\",\r\n    \"accessUsername\": \"roupastoritama\",\r\n    \"accessPassword\": \"Gt%8Pw#HW6j\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/registerMerchant",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"registerMerchant"
											]
										}
									},
									"response": []
								},
								{
									"name": "register merchant jewelry-beauty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\":\"Jewelry\",\r\n    \"lastName\":\"Beauty\",\r\n    \"email\":\"jewelry.beauty@fabioafreitas.site\",\r\n    \"accessUsername\": \"jewelrybeauty\",\r\n    \"accessPassword\": \"1xWKoPn4^7&\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/registerMerchant",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"registerMerchant"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "recover",
					"item": [
						{
							"name": "username",
							"item": [
								{
									"name": "remind my username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\":\"fbio.alves095@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/remindUsername",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"remindUsername"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "recover access password",
							"item": [
								{
									"name": "request access password reset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\":\"fbio.alves095@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/requestAccessPasswordReset",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"requestAccessPasswordReset"
											]
										}
									},
									"response": []
								},
								{
									"name": "reset  access password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"newAccessPassword\":\"11111aA#\",\r\n    \"resetRequestToken\":\"af6ff15b-9cb4-42be-b177-1868ecb9d940\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/resetAccessPassword",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"resetAccessPassword"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "recover transaction password",
							"item": [
								{
									"name": "request transaction password reset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\":\"fbio.alves095@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/requestTransactionPasswordReset",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"requestTransactionPasswordReset"
											]
										}
									},
									"response": []
								},
								{
									"name": "reset  transaction password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if the response status code is 200\r",
													"if (pm.response.code === 200) {\r",
													"    try {\r",
													"        // Parse the JSON response body\r",
													"        let responseBody = pm.response.json();\r",
													"        \r",
													"        // Check if the \"token\" key exists in the response\r",
													"        if (responseBody.token) {\r",
													"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
													"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
													"            console.log(\"JWT set to:\", responseBody.token);\r",
													"        } else {\r",
													"            console.log(\"Access token not found in the response.\");\r",
													"        }\r",
													"    } catch (e) {\r",
													"        console.error(\"Error parsing JSON response:\", e);\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response code is not 200:\", pm.response.code);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accessPassword\":\"$MgNC53W\",\r\n    \"newTransactionPassword\":\"123456\",\r\n    \"resetRequestToken\":\"a0be15f0-51f4-44c7-98d1-8e67e6327439\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/users/auth/resetTransactionPassword",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"resetTransactionPassword"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "profile",
					"item": [
						{
							"name": "get my user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check if the response status code is 200\r",
											"if (pm.response.code === 200) {\r",
											"    try {\r",
											"        // Parse the JSON response body\r",
											"        let responseBody = pm.response.json();\r",
											"        \r",
											"        // Check if the \"token\" key exists in the response\r",
											"        if (responseBody.token) {\r",
											"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
											"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
											"            console.log(\"JWT set to:\", responseBody.token);\r",
											"        } else {\r",
											"            console.log(\"Access token not found in the response.\");\r",
											"        }\r",
											"    } catch (e) {\r",
											"        console.error(\"Error parsing JSON response:\", e);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Response code is not 200:\", pm.response.code);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/users/profile/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"profile",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "update my user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check if the response status code is 200\r",
											"if (pm.response.code === 200) {\r",
											"    try {\r",
											"        // Parse the JSON response body\r",
											"        let responseBody = pm.response.json();\r",
											"        \r",
											"        // Check if the \"token\" key exists in the response\r",
											"        if (responseBody.token) {\r",
											"            // Set the \"token\" token as a collection variable named {{jwt}}\r",
											"            pm.collectionVariables.set(\"jwt\", responseBody.token);\r",
											"            console.log(\"JWT set to:\", responseBody.token);\r",
											"        } else {\r",
											"            console.log(\"Access token not found in the response.\");\r",
											"        }\r",
											"    } catch (e) {\r",
											"        console.error(\"Error parsing JSON response:\", e);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Response code is not 200:\", pm.response.code);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phone\":\"+55 (81) 91234-1234\",\r\n    \"addressLine1\":\"Rua dos testes, 123, Ap-3\",\r\n    \"addressLine2\":\"PrÃ©dio\",\r\n    \"city\":\"SÃ£o bernardo dos campos\",\r\n    \"province\":\"SÃ£o Paulo\",\r\n    \"postalCode\":\"04063-002\",\r\n    \"country\":\"Brasil\",\r\n    \"profilePictureUrl\":\"https://umbraco.com/media/y21lwhsb/niels.webp?rmode=pad&width=680&v=1dad76ab846bdc0\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/users/profile/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"profile",
										"me"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "accounts",
			"item": [
				{
					"name": "user",
					"item": [
						{
							"name": "get my account info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/accounts/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"me"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "get my account info",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/accounts/me",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"accounts",
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 01:37:34 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"ownerFirstName\": \"Andre\",\n    \"ownerLastName\": \"Munhoz\",\n    \"ownerEmail\": \"munhozandre30@gmail.com\",\n    \"balance\": 7.63,\n    \"status\": \"ACTIVE\",\n    \"accountNumber\": \"2121459963\"\n}"
								}
							]
						},
						{
							"name": "get avaliable budget categories",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/accounts/budgetCategories",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"budgetCategories"
									]
								}
							},
							"response": [
								{
									"name": "get avaliable budget categories",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/accounts/budgetCategories",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"accounts",
												"budgetCategories"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 01:37:39 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n        \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n    },\n    {\n        \"budgetCategoryName\": \"SaÃºde\",\n        \"budgetCategoryId\": \"7fb1389e-056c-4f24-8457-5be28c9b48fc\"\n    },\n    {\n        \"budgetCategoryName\": \"EducaÃ§Ã£o\",\n        \"budgetCategoryId\": \"c810edcc-478d-44dc-a1bc-91fa2155672b\"\n    },\n    {\n        \"budgetCategoryName\": \"Transporte\",\n        \"budgetCategoryId\": \"949d30e1-40e6-444c-83e6-e6cee3583ee1\"\n    },\n    {\n        \"budgetCategoryName\": \"Moradia\",\n        \"budgetCategoryId\": \"4e10f8df-dd8d-456b-9344-0053060793bf\"\n    },\n    {\n        \"budgetCategoryName\": \"Lazer\",\n        \"budgetCategoryId\": \"9fb606b0-0894-4c5d-8b1b-da0a5053ab0c\"\n    },\n    {\n        \"budgetCategoryName\": \"VestuÃ¡rio\",\n        \"budgetCategoryId\": \"e5e9d5bb-0866-483c-827a-7933d29a1a8a\"\n    },\n    {\n        \"budgetCategoryName\": \"ServiÃ§os\",\n        \"budgetCategoryId\": \"7329cc8c-13fa-4ace-afe4-2317df093554\"\n    },\n    {\n        \"budgetCategoryName\": \"ComunicaÃ§Ã£o\",\n        \"budgetCategoryId\": \"975acb63-b302-4158-a7ae-9961ff076fcd\"\n    },\n    {\n        \"budgetCategoryName\": \"Investimentos\",\n        \"budgetCategoryId\": \"d6f67ffc-028e-4bee-8660-6aa3dba47e3c\"\n    },\n    {\n        \"budgetCategoryName\": \"DÃ­vidas\",\n        \"budgetCategoryId\": \"8b34896c-b3ef-47ea-8009-271c203bccd8\"\n    },\n    {\n        \"budgetCategoryName\": \"Impostos\",\n        \"budgetCategoryId\": \"b49b9281-bac5-4f38-ba3b-313f543183b7\"\n    },\n    {\n        \"budgetCategoryName\": \"DoaÃ§Ãµes\",\n        \"budgetCategoryId\": \"b8759dca-c5b4-47a1-b789-0fb976d26ef5\"\n    },\n    {\n        \"budgetCategoryName\": \"Outros\",\n        \"budgetCategoryId\": \"507c58ec-8563-44a9-b9a3-7bf439f5db8c\"\n    }\n]"
								}
							]
						},
						{
							"name": "get my account budget allocations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/accounts/me/budget",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"me",
										"budget"
									]
								}
							},
							"response": [
								{
									"name": "get my account budget allocations",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/accounts/me/budget",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"accounts",
												"me",
												"budget"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 01:37:46 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n        \"budgetCategoryId\": \"e30246f3-6e7c-429b-b3ea-4ef1695bf406\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"SaÃºde\",\n        \"budgetCategoryId\": \"8037b9d2-29f6-42db-b2d2-d74e55e30fba\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"EducaÃ§Ã£o\",\n        \"budgetCategoryId\": \"34604507-7728-454e-820e-35bafae8e61a\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Transporte\",\n        \"budgetCategoryId\": \"852fa1de-c9ae-426d-82a4-2856b28bf18f\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Moradia\",\n        \"budgetCategoryId\": \"165a5d4d-065d-4433-ace2-9c6603bc00fa\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Lazer\",\n        \"budgetCategoryId\": \"54fa0fc5-9557-48c5-b016-f7130b7e33e3\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"VestuÃ¡rio\",\n        \"budgetCategoryId\": \"ca226975-076c-4aab-9603-c600a9932c19\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"ServiÃ§os\",\n        \"budgetCategoryId\": \"670a3b0e-d854-4b40-9e05-ddb15b163e32\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"ComunicaÃ§Ã£o\",\n        \"budgetCategoryId\": \"5bd91c82-66b7-40e9-bde9-da0344ad653a\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Investimentos\",\n        \"budgetCategoryId\": \"fbe816ba-ac1d-4f86-9f75-0ade6c396aa9\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"DÃ­vidas\",\n        \"budgetCategoryId\": \"37a4a76e-2f9e-4336-9fbb-0c8b63da7bb8\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Impostos\",\n        \"budgetCategoryId\": \"fa154770-38a9-4e55-9200-9c2e959f6b7f\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"DoaÃ§Ãµes\",\n        \"budgetCategoryId\": \"39f25a5c-7fdc-45ad-a1dc-bc24d00a9c5d\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Outros\",\n        \"budgetCategoryId\": \"72ceb3ea-9b94-48e4-96f6-1dee79f14acd\",\n        \"allocationValue\": 0\n    }\n]"
								}
							]
						},
						{
							"name": "update my account budget allocations",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"allocations\": [\r\n        {\r\n            \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\r\n            \"budgetCategoryId\": \"e30246f3-6e7c-429b-b3ea-4ef1695bf406\",\r\n            \"allocationValue\": 100\r\n        },\r\n        {\r\n            \"budgetCategoryName\": \"SaÃºde\",\r\n            \"budgetCategoryId\": \"8037b9d2-29f6-42db-b2d2-d74e55e30fba\",\r\n            \"allocationValue\": 200\r\n        },\r\n        {\r\n            \"budgetCategoryName\": \"EducaÃ§Ã£o\",\r\n            \"budgetCategoryId\": \"34604507-7728-454e-820e-35bafae8e61a\",\r\n            \"allocationValue\": 150\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/accounts/me/budget",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"me",
										"budget"
									]
								}
							},
							"response": [
								{
									"name": "update my account budget allocations",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"allocations\": [\r\n        {\r\n            \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\r\n            \"budgetCategoryId\": \"e30246f3-6e7c-429b-b3ea-4ef1695bf406\",\r\n            \"allocationValue\": 100\r\n        },\r\n        {\r\n            \"budgetCategoryName\": \"SaÃºde\",\r\n            \"budgetCategoryId\": \"8037b9d2-29f6-42db-b2d2-d74e55e30fba\",\r\n            \"allocationValue\": 200\r\n        },\r\n        {\r\n            \"budgetCategoryName\": \"EducaÃ§Ã£o\",\r\n            \"budgetCategoryId\": \"34604507-7728-454e-820e-35bafae8e61a\",\r\n            \"allocationValue\": 150\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/accounts/me/budget",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"accounts",
												"me",
												"budget"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 01:38:30 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n        \"budgetCategoryId\": \"e30246f3-6e7c-429b-b3ea-4ef1695bf406\",\n        \"allocationValue\": 100\n    },\n    {\n        \"budgetCategoryName\": \"SaÃºde\",\n        \"budgetCategoryId\": \"8037b9d2-29f6-42db-b2d2-d74e55e30fba\",\n        \"allocationValue\": 200\n    },\n    {\n        \"budgetCategoryName\": \"EducaÃ§Ã£o\",\n        \"budgetCategoryId\": \"34604507-7728-454e-820e-35bafae8e61a\",\n        \"allocationValue\": 150\n    },\n    {\n        \"budgetCategoryName\": \"Transporte\",\n        \"budgetCategoryId\": \"852fa1de-c9ae-426d-82a4-2856b28bf18f\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Moradia\",\n        \"budgetCategoryId\": \"165a5d4d-065d-4433-ace2-9c6603bc00fa\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Lazer\",\n        \"budgetCategoryId\": \"54fa0fc5-9557-48c5-b016-f7130b7e33e3\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"VestuÃ¡rio\",\n        \"budgetCategoryId\": \"ca226975-076c-4aab-9603-c600a9932c19\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"ServiÃ§os\",\n        \"budgetCategoryId\": \"670a3b0e-d854-4b40-9e05-ddb15b163e32\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"ComunicaÃ§Ã£o\",\n        \"budgetCategoryId\": \"5bd91c82-66b7-40e9-bde9-da0344ad653a\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Investimentos\",\n        \"budgetCategoryId\": \"fbe816ba-ac1d-4f86-9f75-0ade6c396aa9\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"DÃ­vidas\",\n        \"budgetCategoryId\": \"37a4a76e-2f9e-4336-9fbb-0c8b63da7bb8\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Impostos\",\n        \"budgetCategoryId\": \"fa154770-38a9-4e55-9200-9c2e959f6b7f\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"DoaÃ§Ãµes\",\n        \"budgetCategoryId\": \"39f25a5c-7fdc-45ad-a1dc-bc24d00a9c5d\",\n        \"allocationValue\": 0\n    },\n    {\n        \"budgetCategoryName\": \"Outros\",\n        \"budgetCategoryId\": \"72ceb3ea-9b94-48e4-96f6-1dee79f14acd\",\n        \"allocationValue\": 0\n    }\n]"
								}
							]
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "get all accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/accounts?page=0&size=10&sort=balance,asc",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "sort",
											"value": "balance,asc"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "get all accounts",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/accounts?page=0&size=10&sort=balance,asc",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "balance,asc"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 01:36:28 GMT"
										},
										{
											"key": "Connection",
											"value": "close"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2025-07-01T22:36:28.4160323\",\n    \"status\": 500,\n    \"error\": \"Internal Server Error\",\n    \"message\": \"Access Denied\",\n    \"path\": \"/api/accounts\"\n}"
								},
								{
									"name": "get all accounts",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/accounts?page=0&size=10&sort=balance,asc",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "balance,asc"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 01:37:02 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"content\": [\n        {\n            \"ownerFirstName\": \"PetrÃºcio\",\n            \"ownerLastName\": \"Amorim\",\n            \"ownerEmail\": \"amorimpetrucio3@gmail.com\",\n            \"balance\": 0,\n            \"status\": \"ACTIVE\",\n            \"accountNumber\": \"9553667860\"\n        },\n        {\n            \"ownerFirstName\": \"Juliano\",\n            \"ownerLastName\": \"Mesquita\",\n            \"ownerEmail\": \"juliano.mesquita1991@gmail.com\",\n            \"balance\": 1.02,\n            \"status\": \"ACTIVE\",\n            \"accountNumber\": \"5089233861\"\n        },\n        {\n            \"ownerFirstName\": \"Andre\",\n            \"ownerLastName\": \"Munhoz\",\n            \"ownerEmail\": \"munhozandre30@gmail.com\",\n            \"balance\": 7.63,\n            \"status\": \"ACTIVE\",\n            \"accountNumber\": \"2121459963\"\n        }\n    ],\n    \"pageable\": {\n        \"pageNumber\": 0,\n        \"pageSize\": 10,\n        \"sort\": {\n            \"empty\": false,\n            \"sorted\": true,\n            \"unsorted\": false\n        },\n        \"offset\": 0,\n        \"paged\": true,\n        \"unpaged\": false\n    },\n    \"last\": true,\n    \"totalElements\": 3,\n    \"totalPages\": 1,\n    \"size\": 10,\n    \"number\": 0,\n    \"sort\": {\n        \"empty\": false,\n        \"sorted\": true,\n        \"unsorted\": false\n    },\n    \"numberOfElements\": 3,\n    \"first\": true,\n    \"empty\": false\n}"
								}
							]
						},
						{
							"name": "get account by account number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/accounts/6607146849",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"6607146849"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "suspend account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/accounts/suspend/6299284879",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"suspend",
										"6299284879"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "activate account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/accounts/activate/6299284879",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"activate",
										"6299284879"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "delete account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/accounts/deactivate/6607146849",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"deactivate",
										"6607146849"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "get account budget allocations by accountNumber",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/accounts/3771215989/budget",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"accounts",
										"3771215989",
										"budget"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "transactions",
			"item": [
				{
					"name": "admins",
					"item": [
						{
							"name": "get all transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/transactions?page=0&size=10&sort=amount,asc",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "sort",
											"value": "amount,asc"
										},
										{
											"key": "accountNumbers",
											"value": "2121459963,9553667860",
											"disabled": true
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "get all transactions",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/transactions?page=0&size=10&sort=amount,asc",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"transactions"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "amount,asc"
												},
												{
													"key": "accountNumbers",
													"value": "2121459963,9553667860",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 01:32:06 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"content\": [\n        {\n            \"transactionNumber\": \"d4875691-1a89-428d-a8db-accde44a23fa\",\n            \"createdAt\": \"2025-07-01T21:17:03.948076Z\",\n            \"operationType\": \"TRANSFER_DEBIT\",\n            \"status\": \"APPROVED\",\n            \"description\": \"test depositRequest\",\n            \"amount\": 1.02,\n            \"budgetCategory\": {\n                \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n                \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n            }\n        },\n        {\n            \"transactionNumber\": \"ba39bf12-b701-4fe6-a118-65e45bd257c1\",\n            \"createdAt\": \"2025-07-01T21:17:03.949097Z\",\n            \"operationType\": \"TRANSFER_CREDIT\",\n            \"status\": \"APPROVED\",\n            \"description\": \"test depositRequest\",\n            \"amount\": 1.02\n        },\n        {\n            \"transactionNumber\": \"87f92947-10cc-4941-8802-0b1abdc0ba24\",\n            \"createdAt\": \"2025-07-01T21:14:06.024652Z\",\n            \"operationType\": \"CREDIT\",\n            \"status\": \"PENDING\",\n            \"description\": \"test depositRequest\",\n            \"amount\": 1.17,\n            \"budgetCategory\": {\n                \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n                \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n            }\n        },\n        {\n            \"transactionNumber\": \"feb4212d-b223-4c40-97f9-ee68df71ca91\",\n            \"createdAt\": \"2025-07-01T21:13:30.930144Z\",\n            \"operationType\": \"DEBIT\",\n            \"status\": \"APPROVED\",\n            \"description\": \"test withdraw\",\n            \"amount\": 1.35,\n            \"budgetCategory\": {\n                \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n                \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n            }\n        }\n    ],\n    \"pageable\": {\n        \"pageNumber\": 0,\n        \"pageSize\": 10,\n        \"sort\": {\n            \"empty\": false,\n            \"sorted\": true,\n            \"unsorted\": false\n        },\n        \"offset\": 0,\n        \"paged\": true,\n        \"unpaged\": false\n    },\n    \"last\": true,\n    \"totalElements\": 4,\n    \"totalPages\": 1,\n    \"size\": 10,\n    \"number\": 0,\n    \"sort\": {\n        \"empty\": false,\n        \"sorted\": true,\n        \"unsorted\": false\n    },\n    \"numberOfElements\": 4,\n    \"first\": true,\n    \"empty\": false\n}"
								}
							]
						}
					]
				},
				{
					"name": "clients",
					"item": [
						{
							"name": "depositRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"amount\":1.17,\r\n    \"description\":\"test depositRequest\",\r\n    \"transactionPassword\": \"548269\",\r\n    \"budgetCategoryId\":\"54b9e0b0-63b8-444d-9bda-81a350130473\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/transactions/operations/depositRequest",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"operations",
										"depositRequest"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "depositRequest",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"amount\":1.17,\r\n    \"description\":\"test depositRequest\",\r\n    \"transactionPassword\": \"548269\",\r\n    \"budgetCategoryId\":\"54b9e0b0-63b8-444d-9bda-81a350130473\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/transactions/operations/depositRequest",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"transactions",
												"operations",
												"depositRequest"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Tue, 01 Jul 2025 21:14:06 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"transactionNumber\": \"87f92947-10cc-4941-8802-0b1abdc0ba24\",\n    \"createdAt\": \"2025-07-01T18:14:06.024652-03:00\",\n    \"operationType\": \"CREDIT\",\n    \"status\": \"PENDING\",\n    \"description\": \"test depositRequest\",\n    \"amount\": 1.17,\n    \"budgetCategory\": {\n        \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n        \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n    }\n}"
								}
							]
						},
						{
							"name": "withdraw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"amount\":1.35,\r\n    \"description\":\"test withdraw\",\r\n    \"transactionPassword\": \"548269\",\r\n    \"budgetCategoryId\":\"54b9e0b0-63b8-444d-9bda-81a350130473\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/transactions/operations/withdraw",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"operations",
										"withdraw"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "withdraw",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"amount\":1.35,\r\n    \"description\":\"test withdraw\",\r\n    \"transactionPassword\": \"548269\",\r\n    \"budgetCategoryId\":\"54b9e0b0-63b8-444d-9bda-81a350130473\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/transactions/operations/withdraw",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"transactions",
												"operations",
												"withdraw"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Tue, 01 Jul 2025 16:59:55 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"transactionNumber\": \"f9474d26-5adb-42a7-b31e-f33ff2a578cd\",\n    \"createdAt\": \"2025-07-01T13:59:54.5414892-03:00\",\n    \"operationType\": \"DEBIT\",\n    \"status\": \"APPROVED\",\n    \"description\": \"test withdraw\",\n    \"amount\": 1.35,\n    \"rejectionMessage\": null\n}"
								}
							]
						},
						{
							"name": "transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceTransaction\": {\r\n        \"amount\":1.02,\r\n        \"description\":\"test depositRequest\",\r\n        \"transactionPassword\": \"548269\",\r\n        \"budgetCategoryId\":\"54b9e0b0-63b8-444d-9bda-81a350130473\"\r\n    },\r\n    \"transferAccountNumber\":\"5089233861\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/transactions/operations/transfer",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"operations",
										"transfer"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "transfer",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceTransaction\": {\r\n        \"amount\":1.02,\r\n        \"description\":\"test depositRequest\",\r\n        \"transactionPassword\": \"548269\",\r\n        \"budgetCategoryId\":\"54b9e0b0-63b8-444d-9bda-81a350130473\"\r\n    },\r\n    \"transferAccountNumber\":\"5089233861\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/transactions/operations/transfer",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"transactions",
												"operations",
												"transfer"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Tue, 01 Jul 2025 21:17:05 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"transaction\": {\n        \"transactionNumber\": \"d4875691-1a89-428d-a8db-accde44a23fa\",\n        \"createdAt\": \"2025-07-01T18:17:03.9480764-03:00\",\n        \"operationType\": \"TRANSFER_DEBIT\",\n        \"status\": \"APPROVED\",\n        \"description\": \"test depositRequest\",\n        \"amount\": 1.02,\n        \"budgetCategory\": {\n            \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n            \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n        }\n    },\n    \"receiverInfo\": {\n        \"accountNumber\": \"5089233861\",\n        \"firstName\": \"Juliano\",\n        \"lastName\": \"Mesquita\"\n    }\n}"
								}
							]
						},
						{
							"name": "purchase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"amount\":1000,\r\n    \"description\":\"compra muito cara\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/transactions/purchase",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"purchase"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "get all my transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/transactions/me?page=0&size=10&sort=amount,asc",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"me"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "sort",
											"value": "amount,asc"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "get all transactions Copy",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/transactions/me?page=0&size=10&sort=amount,asc",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"transactions",
												"me"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "amount,asc"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 01:35:18 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"content\": [\n        {\n            \"transactionNumber\": \"d4875691-1a89-428d-a8db-accde44a23fa\",\n            \"createdAt\": \"2025-07-01T21:17:03.948076Z\",\n            \"operationType\": \"TRANSFER_DEBIT\",\n            \"status\": \"APPROVED\",\n            \"description\": \"test depositRequest\",\n            \"amount\": 1.02,\n            \"budgetCategory\": {\n                \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n                \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n            }\n        },\n        {\n            \"transactionNumber\": \"87f92947-10cc-4941-8802-0b1abdc0ba24\",\n            \"createdAt\": \"2025-07-01T21:14:06.024652Z\",\n            \"operationType\": \"CREDIT\",\n            \"status\": \"PENDING\",\n            \"description\": \"test depositRequest\",\n            \"amount\": 1.17,\n            \"budgetCategory\": {\n                \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n                \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n            }\n        },\n        {\n            \"transactionNumber\": \"feb4212d-b223-4c40-97f9-ee68df71ca91\",\n            \"createdAt\": \"2025-07-01T21:13:30.930144Z\",\n            \"operationType\": \"DEBIT\",\n            \"status\": \"APPROVED\",\n            \"description\": \"test withdraw\",\n            \"amount\": 1.35,\n            \"budgetCategory\": {\n                \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n                \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n            }\n        }\n    ],\n    \"pageable\": {\n        \"pageNumber\": 0,\n        \"pageSize\": 10,\n        \"sort\": {\n            \"empty\": false,\n            \"sorted\": true,\n            \"unsorted\": false\n        },\n        \"offset\": 0,\n        \"paged\": true,\n        \"unpaged\": false\n    },\n    \"last\": true,\n    \"totalElements\": 3,\n    \"totalPages\": 1,\n    \"size\": 10,\n    \"number\": 0,\n    \"sort\": {\n        \"empty\": false,\n        \"sorted\": true,\n        \"unsorted\": false\n    },\n    \"numberOfElements\": 3,\n    \"first\": true,\n    \"empty\": false\n}"
								}
							]
						},
						{
							"name": "get transaction by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/transactions/d4875691-1a89-428d-a8db-accde44a23fa",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"d4875691-1a89-428d-a8db-accde44a23fa"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": [
								{
									"name": "get transaction by id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/transactions/d4875691-1a89-428d-a8db-accde44a23fa",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"transactions",
												"d4875691-1a89-428d-a8db-accde44a23fa"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 02 Jul 2025 01:36:04 GMT"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=60"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"transactionNumber\": \"d4875691-1a89-428d-a8db-accde44a23fa\",\n    \"createdAt\": \"2025-07-01T21:17:03.948076Z\",\n    \"operationType\": \"TRANSFER_DEBIT\",\n    \"status\": \"APPROVED\",\n    \"description\": \"test depositRequest\",\n    \"amount\": 1.02,\n    \"budgetCategory\": {\n        \"budgetCategoryName\": \"AlimentaÃ§Ã£o\",\n        \"budgetCategoryId\": \"54b9e0b0-63b8-444d-9bda-81a350130473\"\n    }\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "merchants",
			"item": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		},
		{
			"key": "jwt",
			"value": ""
		}
	]
}